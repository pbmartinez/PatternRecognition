@page "/image-analysis"
@using Core

@inject ISnackbar Snackbar
@inject HttpClient HttpClient

<MudText Typo="Typo.h4" GutterBottom="true">Image Analysis</MudText>
@if (loading)
{
    <MudItem xs="12" md="8" Class="d-flex justify-center align-center" Style="height:500px;">
        <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
    </MudItem>
}
else
{
    <InputFile id="fileInput112" OnChange="UploadFiles" hidden multiple accept=".jpg, .jpeg, .png" />

    <MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput112">
        Upload your image
    </MudButton>
}

<MudGrid>
    @if (!string.IsNullOrEmpty(imageInBase64))
    {
        <MudItem xs="12" md="8" Class="d-flex justify-center align-center" Style="height:500px;">
            <MudImage Src="@imageInBase64" Alt="Funny" Elevation="25" Class="rounded-lg" Width="200" Height="250" />
        </MudItem>
    }
    @if (!loading && Output != null && Output.Score != null)
    {
        <MudItem xs="12" md="4">
            <MudPaper Class="pa-4 mt-6 mt-lg-16" Elevation="0">
                <MudInputLabel>Image is: @Output.PredictedLabel</MudInputLabel>


                <MudText> Certain level: @Math.Round(Output.Score.Max(),2) % </MudText>

            </MudPaper>
        </MudItem>
    }
</MudGrid>

@code
{
    string imageInBase64 = string.Empty;
    bool loading = false;
    RecognizeNaturalImages.ModelOutput Output = new RecognizeNaturalImages.ModelOutput();
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        loading = true;
        imageInBase64 = string.Empty;


        var picture = e.GetMultipleFiles().FirstOrDefault();
        var arrayOfBytes = new byte[picture.Size];
        using (var ms = picture.OpenReadStream())
        {
            var bytesRead = ms.Read(arrayOfBytes, 0, arrayOfBytes.Length);
        }
        imageInBase64 = Convert.ToBase64String(arrayOfBytes);
        Output = await HttpClient.GetFromJsonAsync<RecognizeNaturalImages.ModelOutput>($"/api/patterns/recognize-image?imageInBase64={imageInBase64}");

        loading = false;
    }
}
